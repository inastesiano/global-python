# -*- coding: utf-8 -*-
"""Global.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZE2UJSBpZXSs9ZcwFBq1rsVrDZ3XccWo

# **GLOBAL**

*Programación 1 - UTN - Mendoza*

##**Reglas generales**

*   Puede realizarse en grupos de hasta 4 personas.
*   El entregable es un repositorio de Git que contenga única carpeta con los siguientes archivos:
 - README.md donde se explique cómo ejecutar el programa y se indique cuáles son los participantes del grupo. Se puede incluir un caso de ejemplo que muestre como ejecutar el programa y cuales son los outputs esperados.
 - clases.py donde se declaren la clase "Detector", "Mutador", "Radiacion", "Virus" y "Sanador".
 - ejecutable.py donde se ejecute el programa propiamente dicho. Este archivo deben instanciar las clases necesarias que fueron creadas en los archivos nombrados anteriormente. En Python es posible importar una clase declarada en un archivo en otro archivo distinto (buscar información al respecto).
 - Pueden o no incluir otros archivos que consideren pertinentes.

##**Poblema**

El ADN de una célula cuenta con cuatro bases nitrogenadas: Adenina (A), Timina (T), Citosina (C) y Guanina (G). Analizaremos un problema donde una secuencia de ADN se puede representar en una matriz de 6x6. Por ejemplo: lo siguiente sería una secuencia de ADN.


|   |   |   |   |   |   |
|---|---|---|---|---|---|
| A | G | A | T | C | A |
| G | A | T | T | C | A |
| C | A | A | C | A | T |
| G | A | G | C | T | A |
| A | T | T | G | C | G |
| C | T | G | T | T | C |


Para representar una matriz en Python usaremos tipos nativos de datos, es decir, no utilizaremos paquetes (no Pandas, no NumPy, etc). Es por eso que las representaremos como una lista de strings, donde cada string represente una fila de la matriz. Por ejemplo: la matriz anterior sería:



```
matriz = ["AGATCA", "GATTCA", "CAACAT", "GAGCTA", "ATTGCG", "CTGTTC"]
```


Cuando cualquier base nitrogenada se encuentra repetida por lo menos 4 veces, ya sea en forma vertical, horizontal o diagonal, se considera que el ADN es un mutante. Por ejemplo:

**Mutante horizontal de timinas**

|   |   |   |   |   |   |
|---|---|---|---|---|---|
| **T** | **T** | **T** | **T** | C | A |
| G | A | T | T | C | A |
| C | A | A | T | A | T |
| G | A | G | T | T | A |
| A | T | T | G | C | G |
| C | T | G | T | T | C |

```
mutante_horizontal = ["TTTTCA", "GATTCA", "CAACAT", "GAGCTA", "ATTGCG", "CTGTTC"]
```


**Mutante vertical de timinas**

|   |   |   |   |   |   |
|---|---|---|---|---|---|
| A | G | A | **T** | C | A |
| G | A | T | **T** | C | A |
| C | A | A | **T** | A | T |
| G | A | G | **T** | T | A |
| A | T | T | G | C | G |
| C | T | G | T | T | C |



```
mutante_vertical = ["AGATCA", "GATTCA", "CAATAT", "GAGTTA", "ATTGCG", "CTGTTC"]
```

**Mutante diagonal de timinas**

|   |   |   |   |   |   |
|---|---|---|---|---|---|
|**T** | G | A | T | C | A |
| G | **T** | T | T | C | A |
| C | A | **T** | C | A | T |
| G | A | G | **T** | T | A |
| A | T | T | G | C | G |
| C | T | G | T | T | C |



```
mutante_vertical = ["TGATCA", "GTTTCA", "CATCAT", "GAGTTA", "ATTGCG", "CTGTTC"]
```

##**Programa**

###**clases.py**

####**Clase Detector**
Debe contener:
  - Por lo menos 2 atributos que consideren pertinentes.
  - Método constructor (init) con sus argumentos para definir los atributos al instanciar un objeto.
  - Método detectar_mutantes, encargado de detectar si hay un mutante horizontal, vertical o diagonal. Éste debe tener como argumento la matriz de ADN y devolver un booleano (True si hay mutaciones y False si no hay). Recuerden que las buenas prácticas de Python aconsejan desdoblar una función grande en funciones más pequeñas de modo que cada una haga una tarea específica.


####**Superclase Mutador**
Debe contener:
  - El atributo base_nitrogenada, la cual especificará cuál de las bases se repetirá 4 veces.
  - Por lo menos 2 atributos más que consideren pertinentes.
  - Método constructor (init) con sus argumentos para definir los atributos al instanciar un objeto.
  - Método vacío llamado crear_mutante.


####**Clase Radiacion**
Clase hija de Mutador. La radiación solo crea mutantes horizontales y verticales.
Esta clase debe contener:
  - El atributo base_nitrogenada, la cual especificará cuál de las bases se repetirá 4 veces.
  - Por lo menos 2 atributo más que consideren pertinentes. Pueden ser los heredados de su clase padre.
  - Método constructor (init) con sus argumentos para definir los atributos al instanciar un objeto.
  - Método crear_mutante. Éste debe tener los argumentos base_nitrogenada, posicion_inicial (para saber dónde insertar la mutación) y orientacion_de_la_mutacion (posibles valores: "H" de horizontal o "V" de vertical) y devolver la matriz con las modificaciones pertinentes. Debe incluir manejo de errores (bloques try-except).

####**Clase Virus**
Clase hija de Mutador. Los virus solo crean mutantes diagonales.
Esta clase debe contener:
  - El atributo base_nitrogenada, la cual especificará cuál de las bases se repetirá 4 veces.
  - Por lo menos 2 atributos más que consideren pertinentes. Pueden ser los heredados de su clase padre.
  - Método constructor (init) con sus argumentos para definir los atributos al instanciar un objeto.
  - Método crear_mutante. Éste debe tener los argumentos base_nitrogenada y posicion_inicial (para saber dónde insertar la mutación) y devolver la matriz con las modificaciones pertinentes. Debe incluir manejo de errores (bloques try-except).


####**Clase Sanador**
Debe contener:
  - Por lo menos 2 atributos que consideren pertinentes.
  - Método constructor (init) con sus argumentos para definir los atributos al instanciar un objeto.
  - Método sanar_mutantes, encargado de sanar cualquier tipo de mutación. Éste debe tener como argumento la matriz de ADN, revisar si existen mutaciones y, si las hay, generar aleatoriamente un ADN completamente nuevo que **no** tenga mutaciones y retornarlo. Consejo: esta clase va a necesitar el método detectar_mutante, que ya lo han definido en otra clase!


###**ejecutable.py**
Código que pida al usuario que ingrese un ADN y pregunte si 
desea detectar mutaciones, mutarlo o sanarlo. Dependiendo de la respuesta, 
se deben instanciar las clases necesarias y devolver el ADN final junto con 
algún mensaje informando al respecto del computo realizado.
"""